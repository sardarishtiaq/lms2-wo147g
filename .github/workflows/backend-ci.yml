name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'

env:
  NODE_ENV: test
  CI: true
  FORCE_COLOR: true
  WORKING_DIR: ./src/backend

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache build and test artifacts
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/.jest-cache
            ${{ env.WORKING_DIR }}/.eslintcache
            ${{ env.WORKING_DIR }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/jest.config.ts', '**/.eslintrc.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          npm audit

      - name: Run ESLint
        run: |
          npm run lint
        continue-on-error: false

      - name: Type check
        run: |
          npx tsc --noEmit
        continue-on-error: false

      - name: Run tests with coverage
        run: |
          npm run test:coverage
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results/jest
          JEST_JUNIT_OUTPUT_NAME: results.xml

      - name: Build application
        run: |
          npm run build
        continue-on-error: false

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ env.WORKING_DIR }}/dist
          retention-days: 7
          if-no-files-found: error

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ${{ env.WORKING_DIR }}/coverage
          retention-days: 7
          if-no-files-found: error

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{ env.WORKING_DIR }}/test-results
          retention-days: 7
          if-no-files-found: error

      - name: Check test coverage thresholds
        run: |
          COVERAGE_FILE="./coverage/coverage-summary.json"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "Coverage file not found!"
            exit 1
          fi
          
          BRANCHES=$(jq '.total.branches.pct' "$COVERAGE_FILE")
          FUNCTIONS=$(jq '.total.functions.pct' "$COVERAGE_FILE")
          LINES=$(jq '.total.lines.pct' "$COVERAGE_FILE")
          STATEMENTS=$(jq '.total.statements.pct' "$COVERAGE_FILE")
          
          if (( $(echo "$BRANCHES < 80" | bc -l) )) || \
             (( $(echo "$FUNCTIONS < 80" | bc -l) )) || \
             (( $(echo "$LINES < 80" | bc -l) )) || \
             (( $(echo "$STATEMENTS < 80" | bc -l) )); then
            echo "Coverage is below threshold!"
            echo "Branches: $BRANCHES%"
            echo "Functions: $FUNCTIONS%"
            echo "Lines: $LINES%"
            echo "Statements: $STATEMENTS%"
            exit 1
          fi

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Cache cleanup
        if: always()
        run: |
          npm cache clean --force
          rm -rf .jest-cache
          rm -rf .eslintcache

    timeout-minutes: 15