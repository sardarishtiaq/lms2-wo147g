version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./src/web
      dockerfile: Dockerfile
      target: development
      args:
        API_URL: http://backend:3000
        WS_URL: ws://backend:3000
        NODE_ENV: development
        APP_VERSION: 1.0.0
        TENANT_ID: development
    ports:
      - "3001:80"  # Main application port
      - "9229:9229"  # Debug port
    volumes:
      - ./src/web:/app:delegated
      - web_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000
      - VITE_WS_URL=ws://localhost:3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - crm_network

  # Backend Node.js API Service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: development
      args:
        NODE_ENV: development
    ports:
      - "3000:3000"  # API port
      - "9230:9229"  # Debug port
    volumes:
      - ./src/backend:/app:delegated
      - api_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/crm
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=development_secret_key
      - JWT_EXPIRATION=1d
      - REFRESH_TOKEN_SECRET=development_refresh_secret
      - REFRESH_TOKEN_EXPIRATION=7d
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=development_key
      - AWS_SECRET_ACCESS_KEY=development_secret
      - S3_BUCKET=development-bucket
      - SENDGRID_API_KEY=development_sendgrid_key
      - DEBUG=app:*
      - LOG_LEVEL=debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - crm_network

  # MongoDB Database Service
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_DATABASE=crm
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=development_password
      - MONGODB_LOG_VERBOSITY=verbose
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - crm_network

  # Redis Cache Service
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --save 60 1 
      --loglevel verbose 
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - crm_network

volumes:
  web_node_modules:
    name: crm_web_node_modules
  api_node_modules:
    name: crm_api_node_modules
  mongodb_data:
    name: crm_mongodb_data
  redis_data:
    name: crm_redis_data

networks:
  crm_network:
    name: crm_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16