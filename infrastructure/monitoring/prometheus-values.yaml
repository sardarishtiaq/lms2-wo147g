# Prometheus Helm Values Configuration
# Version: 2.45.0
# Purpose: Production monitoring configuration for multi-tenant CRM system

prometheus:
  # High availability deployment configuration
  replicaCount: 2
  
  image:
    repository: prom/prometheus
    tag: v2.45.0
    pullPolicy: IfNotPresent

  persistentVolume:
    enabled: true
    size: 50Gi
    storageClass: gp2
    backup:
      enabled: true
      schedule: "0 2 * * *"  # Daily backup at 2 AM

  configmapReload:
    enabled: true
    maxConcurrent: 1

  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  retention:
    time: 15d
    size: 45GB
    rules:
      tenant_metrics: 30d    # Extended retention for tenant data
      system_metrics: 15d    # Standard retention for system metrics
      security_metrics: 90d  # Extended retention for security/audit data

  scrape_configs:
    # Backend services monitoring configuration
    - job_name: backend-services
      kubernetes_sd_configs:
        - role: pod
          namespaces:
            names: ["default"]
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: backend
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_tenant]
          target_label: tenant
          action: replace
      scrape_interval: 15s  # Frequent scraping for SLA monitoring
      scrape_timeout: 10s
      metrics_path: /metrics

    # Frontend services monitoring configuration
    - job_name: frontend-services
      static_configs:
        - targets: ['frontend:3000']
      scrape_interval: 30s
      scrape_timeout: 25s
      metrics_path: /metrics

  alertmanager:
    enabled: true
    replicaCount: 2  # HA configuration for alertmanager

    image:
      repository: prom/alertmanager
      tag: v0.25.0
      pullPolicy: IfNotPresent

    persistentVolume:
      enabled: true
      size: 10Gi
      storageClass: gp2

    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

    config:
      global:
        resolve_timeout: 5m
        smtp_require_tls: true

      route:
        group_by: ['alertname', 'cluster', 'service', 'tenant']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: default-receiver
        routes:
          - match:
              severity: critical
            receiver: critical-alerts
            group_wait: 0s  # Immediate notification for critical alerts

      receivers:
        - name: default-receiver
          email_configs:
            - to: alerts@${DOMAIN_NAME}
              from: prometheus@${DOMAIN_NAME}
              smarthost: ${SMTP_HOST}:587
              auth_username: ${SMTP_USER}
              auth_password: ${SMTP_PASSWORD}
              send_resolved: true

        - name: critical-alerts
          email_configs:
            - to: critical@${DOMAIN_NAME}
              from: prometheus@${DOMAIN_NAME}
              smarthost: ${SMTP_HOST}:587
              auth_username: ${SMTP_USER}
              auth_password: ${SMTP_PASSWORD}
              send_resolved: true

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - prometheus.${DOMAIN_NAME}
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.${DOMAIN_NAME}

  security:
    enabled: true
    adminUser: ${PROMETHEUS_ADMIN_USER}
    adminPassword: ${PROMETHEUS_ADMIN_PASSWORD}
    networkPolicy:
      enabled: true
      ingress:
        from:
          - podSelector:
              matchLabels:
                app: monitoring